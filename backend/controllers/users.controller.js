const db = require("../models/db");
const jwt = require("jsonwebtoken");
const bcrypt = require("bcrypt");
const dotenv = require("dotenv");
dotenv.config();

// üîê Fonction utilitaire pour g√©n√©rer un code parent unique
function generateParentCode(length = 6) {
  const chars = 'ABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789';
  let code = '';
  for (let i = 0; i < length; i++) {
    code += chars.charAt(Math.floor(Math.random() * chars.length));
  }
  return code;
}

// GET /api/users
const getAllUsers = (req, res) => {
  const sql = "SELECT id, username, email, role, birthdate FROM users";
  db.query(sql, (err, results) => {
    if (err) {
      console.error("Erreur lors de la r√©cup√©ration des utilisateurs :", err);
      return res.status(500).json({ error: "Erreur serveur" });
    }
    res.json(results);
  });
};

// GET /api/users/:id
const getUserById = (req, res) => {
  const sql = "SELECT id, username, email, role, birthdate FROM users WHERE id = ?";
  db.query(sql, [req.params.id], (err, results) => {
    if (err) {
      return res.status(500).json({ error: "Erreur serveur" });
    }
    if (results.length === 0) {
      return res.status(404).json({ error: "Utilisateur non trouv√©" });
    }
    res.json(results[0]);
  });
};

// POST /api/users
const createUser = async (req, res) => {
  try {
    const { username, email, password, role, birthdate, parent_code } = req.body;

    // ‚úÖ V√©rification du mot de passe s√©curis√©
    const passwordRegex = /^(?=.*[A-Z])(?=.*\d)(?=.*[!@#$%^&*()_+\-=\[\]{};':"\\|,.<>\/?]).{10,}$/;
    if (!passwordRegex.test(password)) {
      return res.status(400).json({
        error: "Le mot de passe doit contenir au moins 10 caract√®res, une majuscule, un chiffre et un caract√®re sp√©cial."
      });
    }

    const hashedPassword = await bcrypt.hash(password, 10);

    // ‚úÖ V√©rification des doublons email ou username
    const checkSql = "SELECT * FROM users WHERE email = ? OR username = ?";
    db.query(checkSql, [email, username], (checkErr, checkResult) => {
      if (checkErr) {
        console.error("Erreur lors de la v√©rification des doublons :", checkErr);
        return res.status(500).json({ error: "Erreur serveur (v√©rification doublons)" });
      }

      if (checkResult.length > 0) {
        const existing = checkResult[0];
        const errorMsg = existing.email === email
          ? "Cet email est d√©j√† utilis√©."
          : "Ce nom d'utilisateur est d√©j√† utilis√©.";
        return res.status(409).json({ error: errorMsg });
      }

      // ‚úÖ G√©n√©ration du parent_code si n√©cessaire
      let finalParentCode = parent_code;
      if (role === 'parent') {
        finalParentCode = generateParentCode();
      }

      // ‚úÖ Insertion
      const sql = "INSERT INTO users (username, email, password, role, birthdate, parent_code) VALUES (?, ?, ?, ?, ?, ?)";
      const values = [username, email, hashedPassword, role, birthdate, finalParentCode];

      db.query(sql, values, (err, result) => {
        if (err) {
          console.error("Erreur √† la cr√©ation :", err);
          return res.status(500).json({ error: "Erreur lors de la cr√©ation de l'utilisateur" });
        }

        const token = jwt.sign({ id: result.insertId, role }, process.env.JWT_SECRET, { expiresIn: "6h" });

        res.status(201).json({
          message: "Utilisateur cr√©√©",
          userId: result.insertId,
          token,
          parent_code: role === "parent" ? finalParentCode : undefined
        });
      });
    });

  } catch (err) {
    console.error("Erreur cr√©ation utilisateur :", err);
    res.status(500).json({ error: "Erreur serveur" });
  }
};

// PUT /api/users/:id
const updateUser = (req, res) => {
  const { username, email, role, birthdate } = req.body;
  const sql = "UPDATE users SET username = ?, email = ?, role = ?, birthdate = ? WHERE id = ?";
  db.query(sql, [username, email, role, birthdate, req.params.id], (err, result) => {
    if (err) {
      return res.status(500).json({ error: "Erreur lors de la mise √† jour" });
    }
    res.json({ message: "Utilisateur mis √† jour" });
  });
};

// DELETE /api/users/:id
const deleteUser = (req, res) => {
  const sql = "DELETE FROM users WHERE id = ?";
  db.query(sql, [req.params.id], (err, result) => {
    if (err) {
      return res.status(500).json({ error: "Erreur lors de la suppression" });
    }
    res.json({ message: "Utilisateur supprim√©" });
  });
};

module.exports = {
  getAllUsers,
  getUserById,
  createUser,
  updateUser,
  deleteUser
};
